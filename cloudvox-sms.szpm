{
  "name": "CloudVox SMS",
  "version": "1.0.0",
  "vendor": "LcX IT Solutions",
  "license": "MIT",
  "url": "https://lcx.wien/",
  "buildhost": "git.lcx.at",
  "builddate": "2019-10-10 10:37:42 UTC",
  "change_log": [
    {
      "version": "1.0.0",
      "date": "2019-10-10 10:37:42 UTC",
      "log": "Initial version."
    }
  ],
  "description": [
    {
      "language": "en",
      "text": "Adding two way SMS for CloudVox"
    }
  ],
  "files": [
    {
      "location": "app/models/channel/driver/sms/cloudvox.rb",
      "permission": 644,
      "encode": "base64",
      "content": "Y2xhc3MgQ2hhbm5lbDo6RHJpdmVyOjpTbXM6OkNsb3Vkdm94CiAgTkFNRSA9ICdzbXMvY2xvdWR2b3gnLmZyZWV6ZQoKICBkZWYgZmV0Y2hhYmxlPyhfY2hhbm5lbCkKICAgIGZhbHNlCiAgZW5kCgogIGRlZiBzZW5kKG9wdGlvbnMsIGF0dHIsIF9ub3RpZmljYXRpb24gPSBmYWxzZSkKICAgIFJhaWxzLmxvZ2dlci5pbmZvICJTZW5kaW5nIFNNUyB0byByZWNpcGllbnQgI3thdHRyWzpyZWNpcGllbnRdfSIKCiAgICByZXR1cm4gdHJ1ZSBpZiBTZXR0aW5nLmdldCgnaW1wb3J0X21vZGUnKQoKICAgIFJhaWxzLmxvZ2dlci5pbmZvICJCYWNrZW5kIHNlbmRpbmcgQ2xvdWR2b3ggU01TIHRvICN7YXR0cls6cmVjaXBpZW50XX0iCiAgICBiZWdpbgogICAgICBwYXJhbXMgPSBidWlsZF9wYXJhbXMob3B0aW9ucywgYXR0cikKCiAgICAgIGlmIFNldHRpbmcuZ2V0KCdkZXZlbG9wZXJfbW9kZScpICE9IHRydWUKICAgICAgICByZXNwb25zZSA9IEZhcmFkYXkucG9zdChvcHRpb25zWzpnYXRld2F5XSwgcGFyYW1zKS5ib2R5CiAgICAgICAgcmFpc2UgcmVzcG9uc2UgaWYgIXJlc3BvbnNlLm1hdGNoPygnTWVzc2FnZSBhY2NlcHRlZCcpCiAgICAgIGVuZAoKICAgICAgdHJ1ZQogICAgcmVzY3VlID0+IGUKICAgICAgUmFpbHMubG9nZ2VyLmRlYnVnICJDbG91ZHZveCBlcnJvcjogI3tlLmluc3BlY3R9IgogICAgICByYWlzZSBlCiAgICBlbmQKICBlbmQKCiAgZGVmIHByb2Nlc3MoX29wdGlvbnMsIGF0dHIsIGNoYW5uZWwpCiAgICBSYWlscy5sb2dnZXIuaW5mbyAiUmVjZWl2aW5nIFNNUyBmcm9tIHJlY2lwaWVudCAje2F0dHJbOkZyb21dfSIKCiAgICAjIHByZXZlbnQgYWxyZWFkeSBjcmVhdGVkIGFydGljbGVzCiAgICBpZiBUaWNrZXQ6OkFydGljbGUuZmluZF9ieShtZXNzYWdlX2lkOiBhdHRyWzpTbXNNZXNzYWdlU2lkXSkKICAgICAgcmV0dXJuIFsnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtODsnLCB7IHN0YXR1czogJ3Byb2Nlc3NlZCcsIHRpY2tldF9pZDogJyd9LnRvX2pzb25dCiAgICBlbmQKCiAgICAjIGZpbmQgc2VuZGVyCiAgICB1c2VyID0gVXNlci53aGVyZShtb2JpbGU6IGF0dHJbOkZyb21dKS5vcmRlcig6dXBkYXRlZF9hdCkuZmlyc3QKICAgIGlmICF1c2VyCiAgICAgIF9mcm9tX2NvbW1lbnQsIHByZWZlcmVuY2VzID0gQ3RpOjpDYWxsZXJJZC5nZXRfY29tbWVudF9wcmVmZXJlbmNlcyhhdHRyWzpGcm9tXSwgJ2Zyb20nKQogICAgICBpZiBwcmVmZXJlbmNlcyAmJiBwcmVmZXJlbmNlc1snZnJvbSddICYmIHByZWZlcmVuY2VzWydmcm9tJ11bMF0KICAgICAgICBpZiBwcmVmZXJlbmNlc1snZnJvbSddWzBdWydsZXZlbCddID09ICdrbm93bicgJiYgcHJlZmVyZW5jZXNbJ2Zyb20nXVswXVsnb2JqZWN0J10gPT0gJ1VzZXInCiAgICAgICAgICB1c2VyID0gVXNlci5maW5kX2J5KGlkOiBwcmVmZXJlbmNlc1snZnJvbSddWzBdWydvX2lkJ10pCiAgICAgICAgZW5kCiAgICAgIGVuZAogICAgZW5kCiAgICBpZiAhdXNlcgogICAgICB1c2VyID0gVXNlci5jcmVhdGUhKAogICAgICAgIGZpcnN0bmFtZTogYXR0cls6RnJvbV0sCiAgICAgICAgbW9iaWxlOiAgICBhdHRyWzpGcm9tXSwKICAgICAgKQogICAgZW5kCgogICAgVXNlckluZm8uY3VycmVudF91c2VyX2lkID0gdXNlci5pZAoKICAgICMgZmluZCB0aWNrZXQKICAgIGFydGljbGVfdHlwZV9zbXMgPSBUaWNrZXQ6OkFydGljbGU6OlR5cGUuZmluZF9ieShuYW1lOiAnc21zJykKICAgIHN0YXRlX2lkcyA9IFRpY2tldDo6U3RhdGUud2hlcmUobmFtZTogJXdbY2xvc2VkIG1lcmdlZCByZW1vdmVkXSkucGx1Y2soOmlkKQogICAgdGlja2V0ID0gVGlja2V0LndoZXJlKGN1c3RvbWVyX2lkOiB1c2VyLmlkLCBjcmVhdGVfYXJ0aWNsZV90eXBlX2lkOiBhcnRpY2xlX3R5cGVfc21zLmlkKS53aGVyZS5ub3Qoc3RhdGVfaWQ6IHN0YXRlX2lkcykub3JkZXIoOnVwZGF0ZWRfYXQpLmZpcnN0CiAgICB0aWNrZXRfYWN0aW9uID0gJ2NyZWF0ZWQnCgogICAgaWYgdGlja2V0CiAgICAgIHRpY2tldF9hY3Rpb24gPSAndXBkYXRlZCcKICAgICAgbmV3X3N0YXRlID0gVGlja2V0OjpTdGF0ZS5maW5kX2J5KGRlZmF1bHRfY3JlYXRlOiB0cnVlKQogICAgICBpZiB0aWNrZXQuc3RhdGVfaWQgIT0gbmV3X3N0YXRlLmlkCiAgICAgICAgdGlja2V0LnN0YXRlID0gVGlja2V0OjpTdGF0ZS5maW5kX2J5KGRlZmF1bHRfZm9sbG93X3VwOiB0cnVlKQogICAgICAgIHRpY2tldC5zYXZlIQogICAgICBlbmQKICAgIGVsc2UKICAgICAgaWYgY2hhbm5lbC5ncm91cF9pZC5ibGFuaz8KICAgICAgICByYWlzZSBFeGNlcHRpb25zOjpVbnByb2Nlc3NhYmxlRW50aXR5LCAnR3JvdXAgbmVlZGVkIGluIGNoYW5uZWwgZGVmaW5pdGlvbiEnCiAgICAgIGVuZAoKICAgICAgZ3JvdXAgPSBHcm91cC5maW5kX2J5KGlkOiBjaGFubmVsLmdyb3VwX2lkKQogICAgICBpZiAhZ3JvdXAKICAgICAgICByYWlzZSBFeGNlcHRpb25zOjpVbnByb2Nlc3NhYmxlRW50aXR5LCAnR3JvdXAgaXMgaW52YWxpZCEnCiAgICAgIGVuZAoKICAgICAgdGl0bGUgPSBhdHRyWzpCb2R5XQogICAgICBpZiB0aXRsZS5sZW5ndGggPiA0MAogICAgICAgIHRpdGxlID0gIiN7dGl0bGVbMCwgNDBdfS4uLiIKICAgICAgZW5kCiAgICAgIHRpY2tldCA9IFRpY2tldC5uZXcoCiAgICAgICAgZ3JvdXBfaWQ6ICAgIGNoYW5uZWwuZ3JvdXBfaWQsCiAgICAgICAgdGl0bGU6ICAgICAgIHRpdGxlLAogICAgICAgIHN0YXRlX2lkOiAgICBUaWNrZXQ6OlN0YXRlLmZpbmRfYnkoZGVmYXVsdF9jcmVhdGU6IHRydWUpLmlkLAogICAgICAgIHByaW9yaXR5X2lkOiBUaWNrZXQ6OlByaW9yaXR5LmZpbmRfYnkoZGVmYXVsdF9jcmVhdGU6IHRydWUpLmlkLAogICAgICAgIGN1c3RvbWVyX2lkOiB1c2VyLmlkLAogICAgICAgIHByZWZlcmVuY2VzOiB7CiAgICAgICAgICBjaGFubmVsX2lkOiBjaGFubmVsLmlkLAogICAgICAgICAgc21zOiAgICAgICAgewogICAgICAgICAgICBBY2NvdW50U2lkOiBhdHRyWydBY2NvdW50U2lkJ10sCiAgICAgICAgICAgIEZyb206ICAgICAgIGF0dHJbJ0Zyb20nXSwKICAgICAgICAgICAgVG86ICAgICAgICAgYXR0clsnVG8nXSwKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICkKICAgICAgdGlja2V0LnNhdmUhCiAgICBlbmQKCiAgICBUaWNrZXQ6OkFydGljbGUuY3JlYXRlISgKICAgICAgdGlja2V0X2lkOiAgICB0aWNrZXQuaWQsCiAgICAgIHR5cGU6ICAgICAgICAgYXJ0aWNsZV90eXBlX3NtcywKICAgICAgc2VuZGVyOiAgICAgICBUaWNrZXQ6OkFydGljbGU6OlNlbmRlci5maW5kX2J5KG5hbWU6ICdDdXN0b21lcicpLAogICAgICBib2R5OiAgICAgICAgIGF0dHJbOkJvZHldLAogICAgICBmcm9tOiAgICAgICAgIGF0dHJbOkZyb21dLAogICAgICB0bzogICAgICAgICAgIGF0dHJbOlRvXSwKICAgICAgbWVzc2FnZV9pZDogICBhdHRyWzpTbXNNZXNzYWdlU2lkXSwKICAgICAgY29udGVudF90eXBlOiAndGV4dC9wbGFpbicsCiAgICAgIHByZWZlcmVuY2VzOiAgewogICAgICAgIGNoYW5uZWxfaWQ6IGNoYW5uZWwuaWQsCiAgICAgICAgc21zOiAgICAgICAgewogICAgICAgICAgQWNjb3VudFNpZDogYXR0clsnQWNjb3VudFNpZCddLAogICAgICAgICAgRnJvbTogICAgICAgYXR0clsnRnJvbSddLAogICAgICAgICAgVG86ICAgICAgICAgYXR0clsnVG8nXSwKICAgICAgICB9CiAgICAgIH0KICAgICkKCiAgICBbJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLTg7JywgeyBzdGF0dXM6IHRpY2tldF9hY3Rpb24sIHRpY2tldF9pZDogdGlja2V0LmlkIH0udG9fanNvbl0KICBlbmQKCiAgZGVmIHNlbGYuZGVmaW5pdGlvbgogICAgewogICAgICBuYW1lOiAgICAgICAgICdjbG91ZHZveCcsCiAgICAgIGFkYXB0ZXI6ICAgICAgJ3Ntcy9jbG91ZHZveCcsCiAgICAgIGFjY291bnQ6ICAgICAgWwogICAgICAgIHsgbmFtZTogJ29wdGlvbnM6OmdhdGV3YXknLCBkaXNwbGF5OiAnR2F0ZXdheScsIHRhZzogJ2lucHV0JywgdHlwZTogJ3RleHQnLCBsaW1pdDogMjAwLCBudWxsOiBmYWxzZSwgcGxhY2Vob2xkZXI6ICdodHRwczovL3Ntcy5jbG91ZHZveC5ldS9tZXNzYWdlcy9zZW5kX2FwaScsIGRlZmF1bHQ6ICdodHRwczovL3Ntcy5jbG91ZHZveC5ldS9tZXNzYWdlcy9zZW5kX2FwaScgfSwKICAgICAgICB7IG5hbWU6ICdvcHRpb25zOjp3ZWJob29rX3Rva2VuJywgZGlzcGxheTogJ1dlYmhvb2sgVG9rZW4nLCB0YWc6ICdpbnB1dCcsIHR5cGU6ICd0ZXh0JywgbGltaXQ6IDIwMCwgbnVsbDogZmFsc2UsIGRlZmF1bHQ6IERpZ2VzdDo6TUQ1LmhleGRpZ2VzdChyYW5kKDk5OV85OTlfOTk5Xzk5OSkudG9fcyksIGRpc2FibGVkOiB0cnVlLCByZWFkb25seTogdHJ1ZSB9LAogICAgICAgIHsgbmFtZTogJ29wdGlvbnM6OnRva2VuJywgZGlzcGxheTogJ0Nsb3Vkdm94IFNNUyBBUEkgS2V5JywgdGFnOiAnaW5wdXQnLCB0eXBlOiAndGV4dCcsIGxpbWl0OiAyMDAsIG51bGw6IGZhbHNlIH0sCiAgICAgICAgeyBuYW1lOiAnb3B0aW9uczo6c2VuZGVyJywgZGlzcGxheTogJ1NlbmRlcicsIHRhZzogJ2lucHV0JywgdHlwZTogJ3RleHQnLCBsaW1pdDogMjAwLCBudWxsOiBmYWxzZSwgcGxhY2Vob2xkZXI6ICcrNDkxNzEwMDAwMDAwJyB9LAogICAgICAgIHsgbmFtZTogJ2dyb3VwX2lkJywgZGlzcGxheTogJ0Rlc3RpbmF0aW9uIEdyb3VwJywgdGFnOiAnc2VsZWN0JywgbnVsbDogZmFsc2UsIHJlbGF0aW9uOiAnR3JvdXAnLCBudWxsb3B0aW9uOiB0cnVlLCBmaWx0ZXI6IHsgYWN0aXZlOiB0cnVlIH0gfSwKICAgICAgXSwKICAgICAgbm90aWZpY2F0aW9uOiBbCiAgICAgICAgeyBuYW1lOiAnb3B0aW9uczo6Z2F0ZXdheScsIGRpc3BsYXk6ICdHYXRld2F5JywgdGFnOiAnaW5wdXQnLCB0eXBlOiAndGV4dCcsIGxpbWl0OiAyMDAsIG51bGw6IGZhbHNlLCBwbGFjZWhvbGRlcjogJ2h0dHBzOi8vc21zLmNsb3Vkdm94LmV1L21lc3NhZ2VzL3NlbmRfYXBpJywgZGVmYXVsdDogJ2h0dHBzOi8vc21zLmNsb3Vkdm94LmV1L21lc3NhZ2VzL3NlbmRfYXBpJyB9LAogICAgICAgIHsgbmFtZTogJ29wdGlvbnM6OnRva2VuJywgZGlzcGxheTogJ0Nsb3Vkdm94IFNNUyBBUEkgS2V5JywgdGFnOiAnaW5wdXQnLCB0eXBlOiAndGV4dCcsIGxpbWl0OiAyMDAsIG51bGw6IGZhbHNlIH0sCiAgICAgICAgeyBuYW1lOiAnb3B0aW9uczo6c2VuZGVyJywgZGlzcGxheTogJ1NlbmRlcicsIHRhZzogJ2lucHV0JywgdHlwZTogJ3RleHQnLCBsaW1pdDogMjAwLCBudWxsOiBmYWxzZSwgcGxhY2Vob2xkZXI6ICcrNDkxNzEwMDAwMDAwJyB9LAogICAgICBdLAogICAgfQogIGVuZAoKICBwcml2YXRlCgogIGRlZiBidWlsZF9wYXJhbXMob3B0aW9ucywgYXR0cikKICAgIHsKICAgICAgYXBpX2tleTogICAgICBvcHRpb25zWzp0b2tlbl0sCiAgICAgIG1lc3NhZ2U6ICAgICAgYXR0cls6bWVzc2FnZV0sCiAgICAgIGxvbmdfbWVzc2FnZTogJ3knLAogICAgICByZWNpcGllbnQ6ICAgIGF0dHJbOnJlY2lwaWVudF0ucmVtb3ZlKC9cRC8pLAogICAgICBzZW5kZXI6ICAgICAgIG9wdGlvbnNbOnNlbmRlcl0ucmVtb3ZlKC9cRC8pCiAgICB9CiAgZW5kCmVuZAo="
    }
  ]
}
